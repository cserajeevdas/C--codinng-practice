#include <iostream>
class Base
{
	public:
		static Base *Create(int id);
		Base(){}
		virtual ~Base(){}
		virtual DisplayAction()=0;
};

class Derived1: public Base
{
	public:
		Derived1(){cout<<"Derived1 created\n";}
		~Derived1(){cout<<"Derived1 destroyed\n";}
		void DisplayAction() { cout<< Action from Derived1";}
};

class Derived2: public Base
{
	public:
		Derived2(){cout<<"Derived2 created\n";}
		~Derived2(){cout<<"Derived2 destroyed\n";}
		void DisplayAction() { cout<< Action from Derived2";}
};

class Derived2: public Base
{
	public:
		Derived3(){cout<<"Derived3 created\n";}
		~Derived3(){cout<<"Derived3 destroyed\n";}
		void DisplayAction() { cout<< Action from Derived3";}
};

Base *Base::Create(int id)
{
	if(id ==1)
	{ 
		return new Derived1;
	}
	else if(id ==2)
	{
		return new Derived2;
	}
	else
	{
		return new DErived3;
	}
}

class User
{
	public:
		User():pBase(0)
		{
			int input;
			cout<<"enter ID(1/2/3):";
			cin>>input;
			while((input!=1)&&(input!=2)&&(input!=3))
			{
				cout<<"enter ID:";
				cin>>input;
			}
			pBase = Base::create(input);
		}
		~User()
		{
			if(pBase)
			{
				delete pBase;
				pBase = NULL;
			}
		}
	private:
		Base *pBase;
};




















