//In an aggregation, we also add parts as member variables.
//However, these member variables are typically either references or pointers 
//that are used to point at objects that have been created outside the scope of the class.

//Let’s take a look at a Teacher and Department example in more detail. In this example, we’re going to make a couple of 
//simplifications: First, the department will only hold one teacher. 
//Second, the teacher will be unaware of what department they’re part of.

#include <string>
#include <iostream>
 
class Teacher
{
private:
    std::string m_name;
 
public:
    Teacher(std::string name)
        : m_name(name)
    {
    }
 
    std::string getName() { return m_name; }
};
 
class Department
{
private:
    Teacher *m_teacher; // This dept holds only one teacher for simplicity, but it could hold many teachers
 
public:
    Department(Teacher *teacher = nullptr)
        : m_teacher(teacher)
    {
    }
};

int main()
{
    // Create a teacher outside the scope of the Department
    Teacher *teacher = new Teacher("Bob"); // create a teacher
    {
        // Create a department and use the constructor parameter to pass
        // the teacher to it.
        Department dept(teacher);
 
    } // dept goes out of scope here and is destroyed
 
    // Teacher still exists here because dept did not delete m_teacher
 
    std::cout << teacher->getName() << " still exists!";
 
    delete teacher;
 
    return 0;
}
